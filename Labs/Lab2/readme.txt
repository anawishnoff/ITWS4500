For my weather application, I decided to firstly give the user their choice of units, and once chosen, display the corresponding weather information. I decided to show the user their location (so they can confirm they’re viewing the right information), times of the sunset/sunrise, and all of the current weather information in a box at the top of the page. This allows the user to see any relevant information about the current weather quickly. There is also a five day forecast list so that they can see the low/high everyday and some simple weather statistics. Using the API’s provided icons also makes it easier for the user to quickly skim the weather box or the forecast list in order to get their information.

As for the code behind the application, I chose to use the OpenWeatherMap API. It returns data in JSON format which is easy to handle, and provides current weather as well as forecast data. In my code, I have two small functions which each grab the geolocation of the user and use that geolocation to call either getWeather or getForecast. getWeather populates the top center box with the current weather info, and getForecast populates the forecast list below it. I also hide the data and location divs until a location is found and the weather/forecast information is loaded in to make the page look cleaner. Once a unit is selected, both weather and forecast functions are called, so that the weather/forecast sections will either populate or update themselves with new units. 

For the front-end design, I used Bootstrap to make the website responsive and clean. I didn’t want to incorporate too many colors, sections, or visuals because this application seems like one that someone would want to look at, easily obtain information, and then close. 

getWeather():
I first check what the selected unit is, and then I construct an API call that uses this unit, and uses the geolocation’s coordinates. I also added some css styling so that the selected unit would have a grey background to confirm with the user that they’ve chosen that unit. The API returns a JSON object with lots of statistics about the weather. I save this in a variable called weather_data, and then access all different kinds of statistics (sunrise time, location, current temp, etc) and populate different sections of the “data” div, which is the top center box displaying the current weather. 

The API provides a short description  of the current weather. However, the description is all in lowercase, so I formatted it correctly and displayed it along with the icon returned for the current weather from the API. 

getForecast():
In this function, I check the units again and construct the proper API call. For the 5 day forecast, the API returns a JSON file that has a list of 40 data points - each data point holds weather statistics for a current time. The API gives you a data point for every three hours for the next 5 days, including the rest of the current day. So, if you were to access the application at 12AM, it would give you 40 data points, all from the next five days. 

In order to find the high temperature/low temperature for each day, I first skip through all data points in the list that correspond to the current day (this is what counter is initialized to). Once I know I am at the data point that represents 12 AM on the next day, I go through a double while loop, iterating through all of the temperatures, and adding the maximum one to a list of highs/lows for each day. The inner loop has the condition of k < 8, meaning each day only has 8 maximum data points so you should break and go to the outer loop if you’ve gone past 8 data points. The other condition is that counter is less than the length of the list - counter. This is to make sure you don’t over-index the list of data points, especially if you have to skip through a few of the data points before hand. An iteration of the outer loop represents the changing of a day.

The next while loop is where I get all of the other weather statistics and the icon. I take statistics, icons, and descriptions from 12PM each day because that seems to embody the average weather of the day. I once again skip through all data points from the current day with my counter variable i, and then 4 is added to i to make it so i is at 12 PM. i is incremented by 8 each time in order to skip to the next day’s data. In the loop, I simply append all the weather data as well as the formatted date of each day to the HTML.
