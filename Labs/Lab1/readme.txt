For this lab, I decided to include the username, user’s photo, tweet text, an d the date/time of each tweet. The username and user photo will give good context to the user regarding the tweet; the tweet text is the whole point of the ticker; and the date/time might also give a little more context if maybe the tweets were pulled from a different time or topic in which they were more spread out. 

I faced quite a few issues with the dataset of tweets. The first one was getting a user’s picture. To access a user’s picture, I found a good workaround where instead of using the provided picture link from the API data, you can access their picture by going to https://twitter.com/username/profile_image?size=mini. I customized this for every incoming tweet and was able to retrieve and display many of the pictures. If the user did not have a picture, or I was not able to access it from their profile, I used the CSS img:before selector to put a default image. 

As for the structure of my code, I first retrieved the JSON data and turned it into a javascript array object called tweets. I initialized an integer i, and I populated the page with the first five tweets, giving each tweet a specific ID (“#tweets” + i). After that, every three seconds I prepend a new tweet to the top with a specific ID, and am able to remove the tweet from the bottom by fading out the i-5th tweet. I also include all of this code after initializing the first five tweets inside of a try catch block, making sure that if a user does not have a user name or any other attribute that I am trying to access, the ticker will print out error in all fields, and will move on to the next tweet. 

As for the front-end design and layout, I used Bootstrap to make a simple responsive design and I used Twitter’s blue to form a consistent color scheme. 